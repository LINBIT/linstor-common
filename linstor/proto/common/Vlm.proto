syntax = "proto2";

package com.linbit.linstor.proto.common;
option go_package = "common";

import "linstor/proto/common/LinStorMapEntry.proto";
import "linstor/proto/common/DrbdRsc.proto";
import "linstor/proto/common/LuksRsc.proto";
import "linstor/proto/common/StorageRsc.proto";
import "linstor/proto/common/NvmeRsc.proto";
import "linstor/proto/common/LayerType.proto";
import "linstor/proto/common/ProviderType.proto";

// Volume
message Vlm
{
    optional string vlm_uuid = 1;
    optional string vlm_dfn_uuid = 2;
    required sint32 vlm_nr = 3;
    optional string stor_pool_uuid = 4;

    // if null: vlmDfn, rsc and node are asked for default (in this order)
    optional string stor_pool_name = 5;

    repeated string vlm_flags = 6;
    repeated common.LinStorMapEntry vlm_props = 7;

    // Storage pool's driver simple name
    // in case we have to create a new storage pool
    optional ProviderType provider_kind = 8;

    // Storage pool definition's uuid
    // in case we have to create a new storage pool definition
    optional string stor_pool_dfn_uuid = 9;

    repeated common.LinStorMapEntry stor_pool_dfn_props = 10;
    repeated common.LinStorMapEntry stor_pool_props = 11;
    optional string device_path = 12;

    // Allocated size of the deployed volume reported by the backing device (in KiB)
    optional uint64 allocated_size = 13;

    // Usable size, has to be greater or equal the volume definition's size
    optional uint64 usable_size = 14;

    repeated VlmLayerData layer_data = 15;
}

message VlmLayerData
{
    required LayerType  layer_type = 1;
    optional DrbdVlm    drbd = 2;
    optional LuksVlm    luks = 3;
    optional StorageVlm storage = 4;
    optional NvmeVlm    nvme = 5;
}
